"use client";

import {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import {
  PublicClientApplication,
  InteractionRequiredAuthError,
} from "@azure/msal-browser";
import axios from "axios";
import { useRouter } from "next/navigation";
import { msalConfig, loginRequest } from "./authConfig";

const AuthContext = createContext();

// Backend URL
const BACKEND_URL = "http://localhost:8000/api";

export function AuthProvider({ children }) {
  const [msalInstance, setMsalInstance] = useState(null);
  const [account, setAccount] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const [authError, setAuthError] = useState(null);
  const router = useRouter();

  // MSAL-ƒ± ba≈ülat
  useEffect(() => {
    const initializeMsal = async () => {
      try {
        console.log("üîÑ MSAL ba≈üladƒ±lƒ±r...");
        
        const msalApp = new PublicClientApplication(msalConfig);
        await msalApp.initialize();
        
        setMsalInstance(msalApp);
        setInitialized(true);
        
        console.log("‚úÖ MSAL ba≈üladƒ±ldƒ±");

        // ∆èg…ôr artƒ±q login olubsa yoxla
        const accounts = msalApp.getAllAccounts();
        if (accounts.length > 0) {
          console.log("üë§ M√∂vcud account tapƒ±ldƒ±:", accounts[0].username);
          
          // Token-i yoxla
          const token = localStorage.getItem("accessToken");
          if (token) {
            console.log("üîë Token localStorage-da tapƒ±ldƒ±");
            try {
              // Backend il…ô token-i yoxla
              await validateTokenWithBackend(token);
              setAccount(accounts[0]);
              console.log("‚úÖ Token t…ôsdiql…ôndi");
            } catch (error) {
              console.log("‚ùå Token etibarsƒ±zdƒ±r, silindi");
              clearAuth();
            }
          }
        }
        
      } catch (error) {
        console.error("‚ùå MSAL ba≈ülatma x…ôtasƒ±:", error);
        setAuthError("Autentifikasiya sistemi ba≈ülatƒ±lmadƒ±");
      } finally {
        setLoading(false);
      }
    };

    initializeMsal();
  }, []);

  // Backend il…ô token yoxla
  const validateTokenWithBackend = async (token) => {
    const response = await axios.get(`${BACKEND_URL}/me/`, {
      headers: { Authorization: `Bearer ${token}` },
      timeout: 5000,
    });
    return response.data;
  };

  // Auth m…ôlumatlarƒ±nƒ± t…ômizl…ô
  const clearAuth = () => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    setAccount(null);
    setAuthError(null);
  };

  // Login funksiyasƒ±
  const login = useCallback(async () => {
    if (!msalInstance || !initialized) {
      setAuthError("Sistem h…ôl…ô hazƒ±r deyil, bir az g√∂zl…ôyin");
      return;
    }

    try {
      setAuthError(null);
      setLoading(true);

      console.log("üîê Microsoft login ba≈üladƒ±lƒ±r...");

      // Microsoft popup login
      const loginResponse = await msalInstance.loginPopup({
        ...loginRequest,
        redirectUri: window.location.origin,
      });

      console.log("‚úÖ Microsoft login uƒüurlu:", loginResponse.account.username);

      // ID Token al
      const tokenResponse = await msalInstance.acquireTokenSilent({
        ...loginRequest,
        account: loginResponse.account,
      });

      console.log(" ID Token alƒ±ndƒ±, backend-…ô g√∂nd…ôrilir... " , tokenResponse);

      // Backend-…ô g√∂nd…ôr
      const backendResponse = await axios.post(
        `${BACKEND_URL}/auth/microsoft/`,
        {
          id_token: tokenResponse.idToken,
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
          timeout: 10000,
        }
      );

      console.log("üéâ Backend autentifikasiyasƒ± uƒüurlu");

      if (backendResponse.data.success) {
        // Token-l…ôri saxla
        localStorage.setItem("accessToken", backendResponse.data.access);
        localStorage.setItem("refreshToken", backendResponse.data.refresh);
        
        // Account m…ôlumatlarƒ±nƒ± yenil…ô
        setAccount({
          ...loginResponse.account,
          ...backendResponse.data.user,
        });

        console.log("üë§ ƒ∞stifad…ô√ßi m…ôlumatlarƒ± yenil…ôndi");

        // Dashboard-a y√∂nl…ôndir
        router.push("/home");
      } else {
        throw new Error(backendResponse.data.error || "Backend autentifikasiyasƒ± uƒüursuz");
      }

    } catch (error) {
      console.error("‚ùå Login x…ôtasƒ±:", error);
      
      let errorMessage = "Giri≈ü edil…ô bilm…ôdi";
      
      if (error.response?.status === 401) {
        errorMessage = "Autentifikasiya uƒüursuz - m…ôlumatlar yanlƒ±≈üdƒ±r";
      } else if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error instanceof InteractionRequiredAuthError) {
        errorMessage = "Yenid…ôn c…ôhd edin";
      } else if (error.code === 'ECONNABORTED') {
        errorMessage = "Baƒülantƒ± vaxtƒ± bitdi - backend i≈ül…ôyirmi?";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setAuthError(errorMessage);
      clearAuth();
    } finally {
      setLoading(false);
    }
  }, [msalInstance, initialized, router]);

  // Logout funksiyasƒ±
  const logout = useCallback(async () => {
    if (!msalInstance || !initialized) return;

    try {
      console.log("üö™ √áƒ±xƒ±≈ü edilir...");
      
      await msalInstance.logoutPopup({
        postLogoutRedirectUri: window.location.origin,
        mainWindowRedirectUri: window.location.origin,
      });
      
      clearAuth();
      console.log("‚úÖ √áƒ±xƒ±≈ü uƒüurlu");
      router.push("/login");
      
    } catch (error) {
      console.error("‚ùå √áƒ±xƒ±≈ü x…ôtasƒ±:", error);
      setAuthError("√áƒ±xƒ±≈ü edil…ô bilm…ôdi");
      
      // M…ôcburi √ßƒ±xƒ±≈ü
      clearAuth();
      router.push("/login");
    }
  }, [msalInstance, initialized, router]);

  // Context d…ôy…ôri
  const contextValue = {
    account,
    isAuthenticated: !!account && !!localStorage.getItem("accessToken"),
    login,
    logout,
    loading,
    initialized,
    authError,
    clearError: () => setAuthError(null),
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth() hook yalnƒ±z AuthProvider daxilind…ô istifad…ô edil…ô bil…ôr');
  }
  return context;
}